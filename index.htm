
<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Controle de Gastos</title>
  <style>
     
body {
  font-family: Arial, sans-serif;
  background-color: #f3f3f3;
  margin: 0;
  padding: 20px;
}

.container {
  max-width: 500px;
  background: white;
  padding: 20px;
  margin: auto;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

form {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 20px;
}

input, select, button {
  padding: 10px;
  font-size: 1rem;
}

ul {
  list-style: none;
  padding: 0;
}

li {
  padding: 10px;
  margin-bottom: 10px;
  background-color: #eee;
  display: flex;
  justify-content: space-between;
  border-radius: 4px;
}

    
  </style>
</head>
<body>
   <div class="container">
    <h1>Controle de Gastos</h1>
    
    <form id="form">
      <input type="text" id="descricao" placeholder="Descrição" required />
      <input type="number" id="valor" placeholder="Valor (R$)" required />
      <select id="tipo">
        <option value="receita">Receita</option>
        <option value="despesa">Despesa</option>
      </select>
      <button onclick="removerTransacao()" type="submit">Adicionar</button>
    </form>

    <h2>Resumo</h2>
    <p><strong>Saldo atual:</strong> R$ <span id="saldo">0.00</span></p>

    <ul id="lista-gastos"></ul>
  </div>

  <script>
    // --------------------------------------------------------------------------------------
    // Explicação básica dos conceitos usados:
    //
    // 1. Elementos HTML são acessados pelo JavaScript para manipular o conteúdo da página.
    //    Usamos document.getElementById("id") para pegar o elemento com o id específico.
    //
    // 2. Variáveis armazenam dados na memória temporária do navegador.
    //
    // 3. Funções são blocos de código que executam tarefas específicas e podem ser chamadas quando quiser.
    //
    // 4. Eventos são ações do usuário, como clicar num botão, que disparam funções.
    //
    // 5. Arrays são listas de dados.
    //
    // 6. Objetos são estruturas que guardam dados em pares de chave:valor.
    //
    // 7. LocalStorage é uma memória que o navegador oferece para guardar dados mesmo após fechar a página,
    //    mas só guarda texto (strings). Por isso, usamos JSON para transformar objetos em texto e vice-versa.
    // --------------------------------------------------------------------------------------



    // 1. Seleção de elementos do HTML pelo ID
const form = document.getElementById("form"); // Pega o elemento <form> com ID "form" no HTML
const lista = document.getElementById("lista-gastos"); // Pega a <ul> com ID "lista-gastos" onde as transações (gastos/receitas) serão listadas
const saldo = document.getElementById("saldo"); // Pega o <span> com ID "saldo", onde será mostrado o valor total calculado

// Explicações detalhadas:
// document.getElementById("id"): Esse método retorna uma referência ao elemento do HTML que tem o atributo id igual ao valor passado. Aqui usamos isso para poder manipular esses elementos com JavaScript, como adicionar conteúdo, pegar valores e alterar o visual.
// const: é uma declaração de variável que não pode ser reatribuída. Ou seja, uma vez que a variável é definida, seu valor não pode ser sobrescrito (no caso de objetos, a referência é fixa, mas o conteúdo interno pode mudar).


// 2. Carrega transações salvas do localStorage (memória do navegador)
let transacoes = JSON.parse(localStorage.getItem("Dadostransacoes")) || []; // Tenta carregar os dados salvos, senão usa array vazio

// Explicações detalhadas:
// localStorage: é um objeto global do navegador que permite armazenar dados em forma de texto, que permanecem salvos mesmo depois de fechar a aba ou navegador.
// localStorage.getItem("transacoes"): tenta buscar o valor associado à chave "transacoes". Se não houver nada salvo, retorna null.
// JSON.parse(...): converte um texto em formato JSON (string) para um objeto ou array utilizável em JavaScript.
// || []: operador lógico OU. Se o valor à esquerda for null ou undefined, o da direita (array vazio) será usado como valor padrão.


// 3. Atualiza o saldo com base nas transações
function atualizarSaldo() {
  const total = transacoes.reduce((acc, t) => {
    return t.tipo === "receita" ? acc + t.valor : acc - t.valor;
  }, 0);

  saldo.textContent = total.toFixed(2);

  // Explicações detalhadas:
// function atualizarSaldo(): define uma função que será chamada para calcular e atualizar o saldo total.
// transacoes.reduce(...): reduce é um método de array que acumula valores e transforma todos os elementos em um só resultado. Ele recebe uma função callback com dois parâmetros: um acumulador (acc) e o item atual (t), e retorna um único valor final. O segundo argumento (0) é o valor inicial do acumulador.
// t.tipo === "receita" ? acc + t.valor : acc - t.valor: Isso é um operador ternário (condicional). Se a transação for "receita", somamos o valor. Caso contrário ("despesa"), subtraímos.
// saldo.textContent = ...: textContent é uma propriedade que define o texto visível dentro do elemento HTML. Aqui usamos ela para mostrar o saldo atualizado.
// toFixed(2): converte o número para uma string com exatamente 2 casas decimais. Isso garante que o valor apareça como dinheiro, por exemplo: 10.00 ou 12.50.
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// IMPORTANTE: Aqui usamos .tipo, mas isso NÃO É um método do JavaScript!
// "tipo" é apenas o NOME de uma propriedade que criamos dentro de cada transação.
// Serve para classificar se a transação é uma "receita" ou uma "despesa".
// Exemplo de um objeto transação:
// { descricao: "Venda", valor: 100, tipo: "receita" }
// Então, t.tipo acessa o valor da chave "tipo", que neste caso seria "receita".

}

// 4. Salva as transações no navegador
function salvarTransacoes() {
  // --- EXPLICAÇÕES DETALHADAS ---

  // localStorage: é um objeto nativo do JavaScript que permite salvar dados no navegador do usuário.
  // Ele guarda informações de forma "permanente" (até que sejam removidas manualmente).
  // Mesmo que o navegador seja fechado, os dados continuam lá.

  // .setItem(): é um MÉTODO (função que pertence ao objeto localStorage).
  // Ele serve para salvar um PAR de "chave" e "valor" no localStorage.
  // Sintaxe: localStorage.setItem("nomeDaChave", "valorEmTexto");

  // "transacoes": é a CHAVE (nome que damos ao dado que será salvo).
  // Essa chave será usada mais tarde para recuperar essas informações do armazenamento.

  // JSON.stringify(transacoes): transforma o conteúdo da variável transacoes em uma string JSON.
  // Isso é necessário porque o localStorage só pode armazenar STRINGS.
  // A variável transacoes é um array de objetos com dados como descrição, valor e tipo (receita ou despesa).

  // IMPORTANTE: a variável transacoes (sem aspas e dentro dos parênteses) é um array que foi criado anteriormente
  // no código para armazenar todas as transações inseridas pelo usuário.
  // Quando usamos JSON.stringify(transacoes), estamos dizendo: 
  // “pegue o conteúdo atual dessa variável e transforme em texto para guardar no navegador”.

  // Resultado final: essa linha salva todas as transações em formato de texto no localStorage,
  // usando a chave "transacoes" para que possamos recuperá-las depois.

  localStorage.setItem("Dadostransacoes", JSON.stringify(transacoes));
}



// 5. Adiciona uma transação na lista HTML (DOM)
function adicionarTransacaoDOM(transacaoEntrada) {
  // Cria um novo elemento <li>, que representa uma linha da lista de transações
  const li = document.createElement("li");

  // Monta o conteúdo do <li> com as informações da transação
  // Usamos crase (template literal) para inserir variáveis de forma dinâmica
  li.innerHTML = `
    ${transacaoEntrada.descricao} - R$ ${transacaoEntrada.valor.toFixed(2)}
    <button onclick="removerTransacao('${transacaoEntrada.id}')">X</button>
  `;

  // Insere o <li> com os dados da transação dentro da <ul> da página (lista que está no HTML)
  // Assim, a nova transação aparece visualmente na lista
  lista.appendChild(li);





  // Explicações detalhadas:

// transacaoEntrada é um objeto que contém os dados de uma transação (como uma ficha).
// Ele costuma ser criado antes com uma estrutura como esta:

// const novaTransacao = {
//   id: gerarIdUnico(),       // exemplo: 73428
//   descricao: "Sorvete",     // valor digitado no input de descrição
//   valor: -10                // valor digitado no input de valor
// };

// .descricao: essa propriedade vem do objeto 'transacaoEntrada'. 
// Ela foi criada no momento em que você capturou o valor do input de descrição com:
// const descricao = document.getElementById("input-descricao").value;
// E depois usou isso para montar o objeto novaTransacao:
// const novaTransacao = { id, descricao, valor };
// Ou seja, transacaoEntrada.descricao está acessando a descrição que o usuário digitou.

// .valor.toFixed(2): formata o número para sempre mostrar duas casas decimais, como em "15.00".

// .id: é um número único gerado para cada transação (pode ser com Date.now() ou Math.random()).
// Ele funciona como um RG dessa transação, ou seja, um identificador único.
// Isso é fundamental para sabermos exatamente qual transação excluir depois, mesmo que haja outras com a mesma descrição ou valor.

// <button onclick="removerTransacao('${transacaoEntrada.id}')">X</button>:
// Esse botão, ao ser clicado, chama a função removerTransacao e envia o ID dessa transação como argumento.
// Exemplo: removerTransacao('73428')
// Isso é o que significa "enviar o ID como parâmetro".
// Permite que o sistema saiba exatamente qual transação remover da lista, usando o número único (ID).
}



// 6. Remove uma transação pelo ID
// Função arrow chamada 'removerTransacao', que recebe um parâmetro 'id'.
// O objetivo dessa função é remover uma transação específica do array 'transacoes',
// ou seja, excluir um item da lista com base no seu ID.
const removerTransacao = (id) => {

  // Aqui usamos o método .filter() para gerar um NOVO array de transações,
  // excluindo apenas aquela transação que tem o mesmo ID que foi passado na função.

  // O que está dentro do filter: (t => t.id !== id)
  // - 't' representa cada item do array, ou seja, cada transação que será verificada.
  // - 't.id' acessa o ID daquela transação.
  // - '!== id' faz a comparação para ver se o ID da transação é diferente do ID passado.
  // - Se for diferente, a função retorna TRUE e mantém o item no novo array.
  // - Se for igual, retorna FALSE e esse item será excluído do novo array.

  // Isso significa que a função está dizendo:
  // "Me dá um novo array com todas as transações, exceto a que tem esse ID aqui."

  transacoes = transacoes.filter(t => t.id !== id);

  // Depois que o novo array já está pronto (sem a transação que queremos remover),
  // chamamos a função salvarTransacoes().
  // Essa função salva o novo array no localStorage (uma memória do navegador).
  // Isso garante que, mesmo se o usuário atualizar ou fechar a página,
  // as alterações ainda estarão lá quando ele voltar.

  salvarTransacoes();

  // Por fim, chamamos a função renderizar().
  // Essa função é responsável por atualizar tudo na tela:
  // - A lista de transações
  // - O total de entradas
  // - O total de saídas
  // - E o saldo geral

  // Com isso, a interface do usuário sempre mostra as informações corretas e atualizadas.

  renderizar();
};


// 7. Atualiza toda a interface: limpa e mostra os dados
// Função chamada 'renderizar' — o nome já diz: ela serve para "desenhar de novo" tudo na tela.
// Sempre que há alguma alteração nas transações (adicionar ou remover), chamamos essa função
// para garantir que a interface esteja atualizada com os dados corretos.
function renderizar() {

  // Primeiro passo: limpar a lista de transações que está sendo exibida no HTML.
  // A variável 'lista' provavelmente representa a <ul> ou <div> onde as transações aparecem na tela.
  // Quando colocamos: lista.innerHTML = "";
  // Estamos dizendo: "apague todo o conteúdo que estiver dentro desse elemento".
  // Isso é importante para evitar duplicações: a gente limpa tudo antes de redesenhar.

  lista.innerHTML = "";

  // Agora, vamos percorrer o array de transações e exibir cada uma na tela.
  // O método forEach() pecorre cada item de um array e executa uma ação, aqui redesenha cada transação.
  //  serve pra isso: ele executa uma função para cada item do array.
  // Aqui, usamos: transacoes.forEach(adicionarTransacaoDOM);
  // Isso significa: para cada transação existente no array, chame a função adicionarTransacaoDOM
  // passando essa transação como argumento.
  // Essa função é responsável por montar o HTML de uma transação e jogar na lista.

  transacoes.forEach(adicionarTransacaoDOM);

  // Por fim, chamamos a função atualizarSaldo().
  // Essa função recalcula o total de entradas, saídas e o saldo final com base nas transações do array.
  // Depois, atualiza esses valores na interface, mostrando os números certos pro usuário.

  atualizarSaldo();
}


// 8. Evento que escuta o envio do formulário
// Aqui estamos adicionando um "ouvinte de evento" no formulário.
// Ou seja, quando o usuário clicar no botão de enviar (submit),
// essa função vai ser executada automaticamente.
form.addEventListener("submit", function (e) {

  // e.preventDefault() impede o comportamento padrão do formulário,
  // que seria recarregar a página ao ser enviado.
  // Fazemos isso porque queremos controlar o que vai acontecer com JavaScript, sem recarregar a tela.
  e.preventDefault();

  // Agora pegamos os dados que o usuário digitou nos campos do formulário.

  // Pega o que foi digitado no campo com id="descricao" (tipo: "Salário", "Mercado"...)
  const descricao = document.getElementById("descricao").value;

  // Pega o valor digitado no campo com id="valor"
  // O valor vem como texto, então usamos parseFloat() pra converter pra número decimal
  const valor = parseFloat(document.getElementById("valor").value);

  // Pega o valor selecionado no campo tipo ("receita" ou "despesa")
  const tipo = document.getElementById("tipo").value;

  // Aqui criamos um novo objeto chamado "nova", que representa uma nova transação
  // Esse objeto tem três propriedades principais: descrição, valor e tipo
  // E mais uma extra: o ID — que é gerado automaticamente

  const nova = {
    // Cria um ID único com base no tempo atual em milissegundos
    // Isso ajuda a identificar cada transação de forma única (útil pra remover depois)
    id: Date.now().toString(),

    // Essas três linhas abaixo são a forma curta de:
    // descricao: descricao, valor: valor, tipo: tipo
    // Mas como o nome da variável é igual ao da chave, podemos escrever só uma vez

    descricao, // Exemplo: "Salário"
    valor,     // Exemplo: 2500
    tipo       // Exemplo: "receita"
  };

  // Agora que o objeto da nova transação foi criado...

  // Adicionamos ele ao array principal de transações
  transacoes.push(nova);

  // Salvamos o array atualizado no localStorage
  salvarTransacoes();

  // Atualizamos a interface com a nova transação
  renderizar();

  // Limpamos os campos do formulário pra deixar tudo pronto pro próximo preenchimento
  form.reset();
});

// Explicações detalhadas:
// form.addEventListener("submit", ...): escuta quando o formulário é enviado.
// e.preventDefault(): impede o comportamento padrão do formulário (recarregar a página).
// .value: acessa o valor digitado/selecionado pelo usuário em um input.
// parseFloat(): converte uma string para um número decimal (float).
// Date.now(): retorna a quantidade de milissegundos desde 01/01/1970 — garante um número único.
// .toString(): converte esse número para string, para usarmos como ID.
// form.reset(): limpa todos os campos do formulário, deixando-o pronto para novo uso.

  
// 9. Inicializa a página com os dados salvos
renderizar(); // Chama a função para carregar os dados salvos ao abrir a página

// Explicações detalhadas:
// Ao carregar a página, chamamos renderizar() para garantir que todas as transações que estavam salvas apareçam automaticamente. Também garante que o saldo seja calculado corretamente desde o início.


  </script>
</body>
</html>

